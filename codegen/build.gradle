plugins {
    id 'java'
    id 'org.hidetake.swagger.generator' version '2.18.1'
}

repositories {
    jcenter()
}

ext {
    swagger_codegen_version = '3.0.13'
    oltu_version = "1.0.2"
    retrofit_version = "2.3.0"
    swagger_annotations_version = "2.0.10"
    junit_version = "4.12"
    rx_java_version = "2.1.1"
    threetenbp_version = "1.3.5"
    json_fire_version = "1.8.0"
}

dependencies {

    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:converter-scalars:$retrofit_version"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    compile "io.reactivex.rxjava2:rxjava:$rx_java_version"
    compile "io.swagger.core.v3:swagger-annotations:$swagger_annotations_version"
    compile "org.apache.oltu.oauth2:org.apache.oltu.oauth2.client:$oltu_version"
    compile "io.gsonfire:gson-fire:$json_fire_version"
    compile "org.threeten:threetenbp:$threetenbp_version"

    swaggerCodegen "io.swagger.codegen.v3:swagger-codegen-cli:$swagger_codegen_version"

}

swaggerSources {
    def basePackage = 'com.example.petstore'

    shared {
        inputFile = file("${rootDir}/contracts/shared/dummy_contract.yaml")
        code {
            language = 'java'
            rawOptions = [
                    "--group-id=${basePackage}",
                    "--model-package=${basePackage}.shared.models",
            ]
            components = [
                    models         : ['Error', 'Pet'],
                    modelDocs      : false,
                    modelTests     : false,
                    apis           : false,
                    apiDocs        : false,
                    apiTests       : false,
                    supportingFiles: false
            ]
        }
    }

    petstore {
        inputFile = file("${rootDir}/contracts/endpoints/petstore.yaml")
        code {
            language = 'java'
            configFile = file("${projectDir}/config/java.json")
            rawOptions = [
                    "--api-package=${basePackage}.store.api",
                    "--model-package=${basePackage}.store.models",
                    "--invoker-package=${basePackage}.store",
                    "--import-mappings=Pet=${basePackage}.shared.models.Pet,Error=${basePackage}.shared.models.Error"
            ]
            components = [
                    models         : true,
                    modelDocs      : false,
                    modelTests     : false,
                    apis           : true,
                    apiDocs        : false,
                    apiTests       : false,
                    supportingFiles: true
            ]
        }
    }

    pets {
        inputFile = file("${rootDir}/contracts/endpoints/pets.yaml")
        code {
            language = 'java'
            configFile = file("${projectDir}/config/java.json")
            rawOptions = [
                    "--api-package=${basePackage}.pets.api",
                    "--model-package=${basePackage}.pets.models",
                    "--invoker-package=${basePackage}.pets",
                    "--import-mappings=Pet=${basePackage}.shared.models.Pet,Error=${basePackage}.shared.models.Error"
            ]
            components = [
                    models         : true,
                    modelDocs      : false,
                    modelTests     : false,
                    apis           : true,
                    apiDocs        : false,
                    apiTests       : false,
                    supportingFiles: true
            ]
        }
    }
}

[swaggerSources.shared, swaggerSources.petstore, swaggerSources.pets].each {
    compileJava.dependsOn(it.code)
    sourceSets.main.java.srcDirs("${it.code.outputDir}/src/main/java")
}